@using SudokuSolver.Client.Components
@using SudokuSolver.Shared
@using System.Threading

@if (!loaded)
{
    <p>Loading data...</p>
}
else
{
    <p class="mt-5 text-center text-3xl">Sudoku Solver</p>
    <div class="flex justify-center mt-5">
        <div class="grid grid-cols-3 grid-rows-3" style="height: calc(3 * 16rem); width: calc(3 * 16rem);">
            @for (int i = 0; i < 9; i += 3)
            {
                for (int l = 0; l < 9; l += 3)
                {
                    List<TileData> tiles = new List<TileData>();
                    for (int r = 0; r < 3; r++)
                    {
                        for (int c = 0; c < 3; c++)
                        {
                            TileData tile = State.CurrentGrid.Find(tile => tile.index.SequenceEqual(new int[] { r + i, c + l }));
                            if (tile == null)
                            {
                                tile = new TileData() { index = new int[2] { r + i, c + l } };
                            }
                            tiles.Add(tile);
                        }
                    }
                    <SudokuTile Tiles="tiles" />
                }
            }
        </div>
    </div>
}

@code {
    [CascadingParameter] protected SudokuState State { get; set; }
    public bool loaded { get; set; } = false;

    protected override void OnInitialized()
    {
        State.OnStateChanged += () =>
        {
            loaded = true;
            StateHasChanged();
        };
    }
}